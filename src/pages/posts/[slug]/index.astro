---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";

export interface Props {
  post: CollectionEntry<"blog">;
  prevPost: CollectionEntry<"blog">;
  nextPost: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const numberOfPosts = posts.length; // Total of all posts

  const postResult = posts.map((post, i) => ({
    params: { slug: post.slug },
    props: {
      post,
      // Previous post
      prevPost:
        i + 1 === numberOfPosts // If the current post is the oldest
          ? { frontmatter: "" }
          : posts[i + 1],
      // Next post
      nextPost:
        i === 0 // If the current post is the newest
          ? { frontmatter: "" }
          : posts[i - 1],
    },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post, prevPost, nextPost } = Astro.props;
const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});
---

{
  post ? (
    <PostDetails post={post} prevPost={prevPost} nextPost={nextPost} />
  ) : (
    <Posts {...pagination} />
  )
}
